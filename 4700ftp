#!/usr/bin/env python3
import sys
import os
# import socket
import argparse
# import re
# from urllib.parse import urlparse, unquote

from ftp_url import FTPURL
from ftp_client import FTPCL

def arg_parse():
    parsed = argparse.ArgumentParser(description="4700 FTP Client")
    parsed.add_argument("operation", 
                        choices=['ls', 'mkdir', 'rm', 'rmdir', 'cp', 'mv'], 
                        help='operations to perform')
    parsed.add_argument("arg1", help="first argument")
    parsed.add_argument("arg2", nargs='?', help="second argument")
    
    return parsed.parse_args()

def check_ftp(path):
    return path.startswith('ftp://')

def main():
    args = arg_parse()
    oper = args.operation
    ar1 = args.arg1
    ar2 = args.arg2

    if oper in ('ls','mkdir','rm','rmdir'):
        if ar2:
            sys.exit(f"operation {oper} takes only one argument")
        url = FTPURL(ar1)
        client = FTPCL(url.host, url.port)
        client.user_login(url.user, url.password)
        # {'client.lst(url.path)' if oper == 'ls' else ''}
        if oper == 'ls':
            client.lst(url.path)
        elif oper == 'mkdir':
            client.mkdir(url.path)
        elif oper == 'rm':
            client.rm(url.path)
        elif oper == 'rmdir':
            client.rmdir(url.path)
        # {'client.mkdir(url.path)' if oper == 'mkdir' else ''}
        # {'client.rm(url.path)' if oper == 'rm' else ''}
        # {'client.rmdir(url.path)' if oper == 'rmdir' else ''}
        client.quit()

    elif oper in ('cp', 'mv'):
        if not ar2:
            sys.exit(f"operation {oper} needs two arguments")
        if check_ftp(ar1) and not check_ftp(ar2):
            url = FTPURL(ar1)
            client = FTPCL(url.host, url.port)
            client.user_login(url.user, url.password)
            client.download_file(url.path, ar2)
            if oper == 'mv':
                client.rm(url.path)
            client.quit()

        elif not check_ftp(ar1) and check_ftp(ar2):
            if not os.path.isfile(ar1):
                sys.exit(f"Local file cannot be found: {ar1}")
            url = FTPURL(ar2)
            client = FTPCL(url.host, url.port)
            client.user_login(url.user, url.password)
            client.upload_file(ar1, url.path)
            if oper == 'mv':
                os.remove(ar1)
            client.quit()
        else:
            sys.exit("cp/mv operations must be between a local file and FTP URL")

if __name__ == '__main__':
    main()
